7# DICA PARA IMPLEMENTAÇÃO FUTURA - SOFT DELETE

1. ADICIONE ESTAS COLUNAS EM TODAS AS TABELAS:
   - is_deleted TINYINT(1) DEFAULT 0
   - deleted_at TIMESTAMP NULL
   - deleted_by INT NULL (opcional - para registrar quem deletou)

2. EM TODAS AS CONSULTAS SELECT, ADICIONE:
   WHERE is_deleted = 0

3. PARA "DELETAR", USE:
   UPDATE tabela SET is_deleted = 1, deleted_at = NOW() WHERE id = ?

4. PARA RESTAURAR:
   UPDATE tabela SET is_deleted = 0, deleted_at = NULL WHERE id = ?

5. (OPCIONAL) CRIE UMA VIEW PARA VER REGISTROS REMOVIDOS:
   CREATE VIEW vw_tabela_removidos AS
   SELECT * FROM tabela WHERE is_deleted = 1

# BENEFÍCIOS:
- Dados não são perdidos
- Pode restaurar quando precisar
- Mantém histórico completo

# QUANDO IMPLEMENTAR:
1. Fazer backup do banco
2. Adicionar colunas em todas tabelas
3. Modificar todos os DAOs
4. Testar exaustivamente


CREATE TABLE intimacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_cidadao INT,
    id_usuario INT,
    id_queixa INT,
    motivo TEXT,
    data_emissao DATE,
    data_comparecimento DATE,
    local_comparecimento VARCHAR(255),
    status VARCHAR(50),
    observacoes TEXT,
    FOREIGN KEY (id_cidadao) REFERENCES cidadaos(id),
    FOREIGN KEY (id_usuario) REFERENCES agentes(id),
    FOREIGN KEY (id_queixa) REFERENCES ocorrencias(id)
);


criar uma Tabela para reclamocoes, onde posso Cadastrar queixas de corupcao agressão por parte da polícia e outros 


Ótimo ponto! Se o agente não está cadastrado no sistema (por exemplo, é de outra esquadra ou ainda não foi inserido), é melhor permitir que o reclamante informe apenas o nome ou o número de identificação do agente como texto livre. Assim, a reclamação continua sendo registrada mesmo sem a referência direta a um id_agentes


Tabela SQL atualizada: reclamacoes

CREATE TABLE reclamacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_cidadao INT,
    tipo_reclamacao VARCHAR(100), -- Ex: "Contra Polícia", "Serviço", "Outros"
    nome_agente_reclamado VARCHAR(255), -- Nome do agente ou pessoa reclamada
    numero_id_agente VARCHAR(100), -- Ex: Número da farda ou identificação (opcional)
    descricao TEXT,
    data_reclamacao DATE,
    status VARCHAR(50) DEFAULT 'Pendente', -- Pendente, Resolvida, Em Análise
    resposta TEXT,

    FOREIGN KEY (id_cidadao) REFERENCES cidadaos(id)
);


---

Vantagens desse modelo:

Não obriga o uso de id_agente como chave estrangeira.

Permite registrar reclamações mesmo que o agente ainda não esteja no sistema.

Dá flexibilidade para incluir qualquer nome ou número informado pelo cidadão.



---

Se no futuro quiseres associar essas reclamações a agentes reais do sistema, podes criar um campo extra para id_agente_confirmado quando for possível fazer o vínculo.

Queres que eu também prepare um formulário (JSP) para inserir essas reclamações?













Scripts SQL para Adição de Província e Cidade nas Tabelas do SIGEPOL
Os comandos abaixo adicionam os campos 'província' e 'cidade' nas principais tabelas do sistema SIGEPOL. Os valores foram definidos com ENUM contendo as províncias e cidades principais de Moçambique.



Tabela `usuarios`
ALTER TABLE usuarios
ADD COLUMN provincia ENUM(
  'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo Cidade', 'Maputo Província',
  'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambézia'
),
ADD COLUMN cidade ENUM(
  'Pemba', 'Xai-Xai', 'Inhambane', 'Chimoio', 'Maputo', 'Matola',
  'Nampula', 'Lichinga', 'Beira', 'Tete', 'Quelimane'
);
Tabela `queixas`
ALTER TABLE queixas
ADD COLUMN provincia_ocorrencia ENUM(
  'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo Cidade', 'Maputo Província',
  'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambézia'
),
ADD COLUMN cidade_ocorrencia ENUM(
  'Pemba', 'Xai-Xai', 'Inhambane', 'Chimoio', 'Maputo', 'Matola',
  'Nampula', 'Lichinga', 'Beira', 'Tete', 'Quelimane'
);
Tabela `vitimas`
ALTER TABLE vitimas
ADD COLUMN provincia ENUM(
  'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo Cidade', 'Maputo Província',
  'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambézia'
),
ADD COLUMN cidade ENUM(
  'Pemba', 'Xai-Xai', 'Inhambane', 'Chimoio', 'Maputo', 'Matola',
  'Nampula', 'Lichinga', 'Beira', 'Tete', 'Quelimane'
);
Tabela `suspeitos`
ALTER TABLE suspeitos
ADD COLUMN provincia ENUM(
  'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo Cidade', 'Maputo Província',
  'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambézia'
),
ADD COLUMN cidade ENUM(
  'Pemba', 'Xai-Xai', 'Inhambane', 'Chimoio', 'Maputo', 'Matola',
  'Nampula', 'Lichinga', 'Beira', 'Tete', 'Quelimane'
);
Tabela `policiais`
ALTER TABLE policiais
ADD COLUMN provincia ENUM(
  'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo Cidade', 'Maputo Província',
  'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambézia'
),
ADD COLUMN cidade ENUM(
  'Pemba', 'Xai-Xai', 'Inhambane', 'Chimoio', 'Maputo', 'Matola',
  'Nampula', 'Lichinga', 'Beira', 'Tete', 'Quelimane'
);
Tabela `profissionais`
ALTER TABLE profissionais
ADD COLUMN provincia ENUM(
  'Cabo Delgado', 'Gaza', 'Inhambane', 'Manica', 'Maputo Cidade', 'Maputo Província',
  'Nampula', 'Niassa', 'Sofala', 'Tete', 'Zambézia'
),
ADD COLUMN cidade ENUM(
  'Pemba', 'Xai-Xai', 'Inhambane', 'Chimoio', 'Maputo', 'Matola',
  'Nampula', 'Lichinga', 'Beira', 'Tete', 'Quelimane'
);




Perfeito, recebida uma parte importante das estruturas e amostras da base de dados do projeto SIGEPOL. Aqui vai uma análise direta e objetiva:



Análise Técnica Rápida

1.	Tabelas bem estruturadas:

As tabelas estão seguindo um modelo relacional adequado.

Há uso de FOREIGN KEYS implícitas (como id_cidadao, id_queixa, id_usuario_responsavel) — é bom garantir que estejam definidas como chaves estrangeiras no banco.

Uso correto de enums para categorizar tipos e status.


2.	Redundância potencial:

A tabela cidadaos já contém o campo classificacao, mas há também uma tabela classificacoes_cidadao. Isso pode gerar inconsistência. Sugestão:

Deixar o campo classificacao apenas em classificacoes_cidadao para manter histórico de classificações e deixar a tabela cidadaos mais limpa.

Ou, manter em cidadaos apenas a última classificação ativa, usando classificacoes_cidadao como histórico.



3.	Dados incompletos e inconsistentes:

Alguns registros de cidadãos estão com campos obrigatórios vazios ou incoerentes, como:

Nome, email, cidade, provincia faltando ou mal formatados.

Exemplo: joao.teste@email.com com nome mal codificado (JoÃÂÃÂ£o) — problema de encoding (deve usar UTF-8).

Emails como jr5agostinho@gmailcom e wilsonagostinho@gamail.com estão mal escritos.



4.	Normalização possível:

Cidade e provincia aparecem como texto livre em várias tabelas (risco de erro humano).

Melhor criar tabelas auxiliares cidades e provincias com relacionamentos.





Recomendações Práticas

1.	Corrigir encoding de entrada e exibição dos dados.


2.	Implementar chaves estrangeiras com ON DELETE CASCADE ou SET NULL conforme o caso.


3.	Validar dados no frontend/backend:

E-mails válidos.

Telefones com padrão nacional.

Datas coerentes (ex: nascimento em 2025 está errado).



4.	Auditoria: Campos como data_registro, data_classificacao e data_denuncia estão bem pensados — manter essa prática em todas tabelas com atividades.





Se quiser, posso gerar:

Um modelo ER baseado nessas tabelas.

Scripts de criação SQL com chaves estrangeiras e índices.

Protótipos visuais de formulários para entrada e consulta.






